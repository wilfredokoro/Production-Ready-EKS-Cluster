# name: 'Provision VPC then EKS with OIDC'

# on:
#   workflow_dispatch:
#     inputs:
#       tfvars_file:
#         description: 'Path to the .tfvars file for VPC (default: build.tfvars)'
#         required: true
#         default: 'build.tfvars'
#       action:
#         type: choice
#         description: 'Plan or Apply'
#         options:
#           - plan
#           - apply
#         required: true
#         default: 'apply'

# permissions:
#   id-token: write # Required for OIDC
#   contents: read

# jobs:
#   CheckOut-Repo:
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#   Setting-Up-Terraform:
#     runs-on: ubuntu-latest
#     needs: CheckOut-Repo

#     steps:
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 1.8.4

#   Configure-AWS-Credentials:
#     runs-on: ubuntu-latest
#     needs: Setting-Up-Terraform

#     steps:
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: arn:aws:iam::887998956998:role/GitHubActionsRole # Replace with your IAM role ARN
#           aws-region: us-east-1

#   Provision-VPC:
#     runs-on: ubuntu-latest
#     needs: Configure-AWS-Credentials

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 1.8.4

#       - name: Terraform Initialize (VPC)
#         working-directory: terraform/vpc
#         run: terraform init

#       - name: Terraform Plan (VPC)
#         if: ${{ github.event.inputs.action == 'plan' }}
#         working-directory: terraform/vpc
#         run: terraform plan -var-file=${{ github.event.inputs.tfvars_file }} -input=false

#       - name: Terraform Apply (VPC)
#         if: ${{ github.event.inputs.action == 'apply' }}
#         working-directory: terraform/vpc
#         run: terraform apply -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false

#   Provision-EKS:
#     runs-on: ubuntu-latest
#     needs: Provision-VPC

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 1.8.4

#       - name: Terraform Initialize (EKS)
#         working-directory: terraform/eks
#         run: terraform init

#       - name: Terraform Plan (EKS)
#         if: ${{ github.event.inputs.action == 'plan' }}
#         working-directory: terraform/eks
#         run: terraform plan -var-file=eks.tfvars -input=false

#       - name: Terraform Apply (EKS)
#         if: ${{ github.event.inputs.action == 'apply' }}
#         working-directory: terraform/eks
#         run: terraform apply -auto-approve -var-file=eks.tfvars -input=false


name: 'Provision VPC then EKS with OIDC'

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Path to the .tfvars file for VPC (default: build.tfvars)'
        required: false
        default: 'build.tfvars'
      action:
        type: string
        description: 'Plan or Apply (plan/apply)'
        required: true
        default: 'apply'

permissions:
  id-token: write # Required for OIDC
  contents: read

jobs:
  checkout-repo:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  setup-terraform:
    runs-on: ubuntu-latest
    needs: checkout-repo

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

  configure-aws-credentials:
    runs-on: ubuntu-latest
    needs: setup-terraform

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::887998956998:role/GitHubActionsRole # Replace with your IAM role ARN
          aws-region: us-east-1

  provision-vpc:
    runs-on: ubuntu-latest
    needs: configure-aws-credentials

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

      - name: Terraform Initialize (VPC)
        working-directory: terraform/vpc
        run: terraform init

      - name: Terraform Plan (VPC)
        if: ${{ github.event.inputs.action == 'plan' }}
        working-directory: terraform/vpc
        run: terraform plan -var-file=${{ github.event.inputs.tfvars_file }} -input=false

      - name: Terraform Apply (VPC)
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: terraform/vpc
        run: terraform apply -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false

  provision-eks:
    runs-on: ubuntu-latest
    needs: provision-vpc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

      - name: Terraform Initialize (EKS)
        working-directory: terraform/eks
        run: terraform init

      - name: Terraform Plan (EKS)
        if: ${{ github.event.inputs.action == 'plan' }}
        working-directory: terraform/eks
        run: terraform plan -var-file=${{ github.event.inputs.tfvars_file }} -input=false

      - name: Terraform Apply (EKS)
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: terraform/eks
        run: terraform apply -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false
